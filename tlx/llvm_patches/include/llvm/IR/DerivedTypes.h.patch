--- /home/akashk4/tensor/tlx/llvm-project/llvm/./include/llvm/IR/DerivedTypes.h	2022-04-13 11:35:52.907624344 -0500
+++ ./include/llvm/IR/DerivedTypes.h	2022-04-13 09:57:35.750722492 -0500
@@ -97,6 +97,47 @@
   return cast<IntegerType>(this)->getBitWidth();
 }
 
+
+/// Class to represent custom floating-point types. 
+/// Custom floating-point representation type
+class CustomFPType : public Type {
+  friend class LLVMContextImpl;
+
+  /// This enum is just used to hold constants we need for CustomFPType.
+  enum {
+    BITWIDTTH = 12,
+    MIN_NUM_BITS = 1,        ///< Minimum number of bits that can be specified
+    MAX_NUM_BITS = (1<<12)-1 ///< Maximum number of bits that can be specified
+  };
+
+protected:
+  explicit CustomFPType(LLVMContext &C, unsigned Exponent, unsigned Mantissa) : Type(C, CustomFPTyID){
+    unsigned SubclassData = (Exponent << BITWIDTTH) | Mantissa;
+    setSubclassData(SubclassData);
+  }
+
+  explicit CustomFPType(LLVMContext &C, Type::TypeID ID) : Type(C, ID) {}
+
+public:
+
+  unsigned getExponentBitWidth() const { return (getSubclassData() >> BITWIDTTH); }
+
+  unsigned getMantissaBitWidth() const { return getSubclassData(); }
+
+  /// This static method is the primary way of constructing an CustomFPType.
+  /// If an CustomFPType with the same NumBits value was previously instantiated,
+  /// that instance will be returned. Otherwise a new one will be created. Only
+  /// one instance with a given NumBits value is ever created.
+  /// Get or create an CustomFPType instance.
+  static CustomFPType *get(LLVMContext &C, unsigned Exponent, unsigned Mantissa);
+
+  /// Methods for support type inquiry through isa, cast, and dyn_cast.
+  static bool classof(const Type *T) {
+    return T->getTypeID() == CustomFPTyID;
+  }
+};
+
+
 /// Class to represent function types
 ///
 class FunctionType : public Type {
